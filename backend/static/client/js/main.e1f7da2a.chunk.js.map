{"version":3,"sources":["app/Actions/user.js","app/Actions/types.js","app/Components/AppNav/AppNav.js","app/Actions/song.js","app/Components/CreateSongForm/CreateSongForm.js","app/Containers/CreateSong/CreateSongContainer.js","app/Components/Song/Song.js","app/Containers/SongDetail/SongDetailContainer.js","routes.js","app/Components/SongList/SongList.js","app/Components/App/App.js","app/Reducers/user.js","app/Reducers/song.js","app/Reducers/root.js","app/store.js","serviceWorker.js","index.js"],"names":["API_URL","process","SONG_STASH_API_URL","getUserDataFromApi","id","dispatch","a","axios","get","resp","type","data","AppNav","useDispatch","Navbar","color","dark","NavbarBrand","className","href","Nav","navbar","pills","justified","NavItem","NavLink","to","onClick","postNewSong","song","userId","post","user_id","CreateSongForm","formData","formHandler","lyricsUrl","submitHandler","title","artist","lyrics","Col","md","Form","onSubmit","FormGroup","Label","for","Input","name","value","onChange","required","FormText","target","rel","Button","CreateSongContainer","history","useHistory","user","useSelector","store","useState","setFormData","isSubmitting","setIsSubmitting","useEffect","push","submitSong","e","fData","preventDefault","Song","SongDetailContainer","Routes","path","exact","SongList","bootstrap4","keyField","songs","columns","dataField","text","App","isLoading","setIsLoading","fetchUserData","Row","INITIAL_STATE","parseInt","window","token","stashes","htmlify","map","replace","combineReducers","state","action","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","ReactDOM","render","StrictMode","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.e1f7da2a.chunk.js","sourcesContent":["import axios from 'axios';\nimport { FETCH_USER_DATA } from './types';\n\nconst API_URL = process.env.SONG_STASH_API_URL || 'http://127.0.0.1:5000/api';\n\nexport function getUserDataFromApi(id) {\n  return async function(dispatch) {\n    const resp = await axios.get(`${API_URL}/users/${id}`);\n    return dispatch(getUserData(resp.data));\n  }\n}\n\nfunction getUserData(data) {\n  return {\n    type: FETCH_USER_DATA,\n    data,\n  };\n};","// User types\nexport const FETCH_USER_DATA = 'FETCH_USER_DATA';\n\n// Song types\nexport const CREATE_NEW_SONG = 'CREATE_NEW_SONG';\nexport const CLEAR_CURRENT_SONG = 'CLEAR_CURRENT_SONG';","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Nav, Navbar, NavbarBrand, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { CLEAR_CURRENT_SONG } from '../../Actions/types';\nimport './AppNav.css';\n\nexport default function AppNav() {\n  const dispatch = useDispatch();\n  const clearSong = () => {\n    dispatch({\n      type: CLEAR_CURRENT_SONG,\n    });\n  }\n\n  return (\n    <>\n      <Navbar id=\"main-nav-bar\" color=\"dark\" dark >\n        <NavbarBrand className=\"mb-auto mx-auto w-100 text-center\" href=\"/\">SongStash</NavbarBrand>\n        <Nav navbar pills justified className=\"h-75 w-100\">\n          <NavItem className=\"mx-auto my-auto\">\n            <NavLink>My Stashes</NavLink>\n          </NavItem>\n          <NavItem className=\"mx-auto my-auto\">\n            <NavLink>My Songs</NavLink>\n          </NavItem>\n          <NavItem className=\"mx-auto my-auto\">\n            <NavLink>Song Search</NavLink>\n          </NavItem>\n          <NavItem className=\"mx-auto my-auto\">\n            <Link to=\"/createsong\"><NavLink onClick={clearSong}>Create Song</NavLink></Link>\n          </NavItem>\n        </Nav>\n        <NavLink className=\"d-block mx-auto mt-auto\" href=\"/logout\">Log Out</NavLink>\n      </Navbar>\n    </>\n  )\n}","import axios from 'axios';\nimport { CREATE_NEW_SONG } from './types';\n\nconst API_URL = process.env.SONG_STASH_API_URL || 'http://127.0.0.1:5000/api';\n\nexport function postNewSong(song, userId) {\n  return async function(dispatch) {\n    const resp = await axios.post(`${API_URL}/songs`, {...song, user_id: userId});\n    return dispatch(createNewSong(resp.data));\n  }\n}\n\nfunction createNewSong(data) {\n  return {\n    type: CREATE_NEW_SONG,\n    data,\n  };\n};","import React from 'react';\nimport { Button, Col, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nexport default function CreateSongForm({ formData, formHandler, lyricsUrl, submitHandler }) {\n  const { title, artist, lyrics } = formData;\n  return (\n    <Col md={8} className=\"text-center mx-auto\">\n      <Form onSubmit={submitHandler}>\n        <FormGroup>\n          <Label for=\"title\">Title</Label>\n          <Input type=\"text\" id=\"title\" name=\"title\" value={title} onChange={formHandler} required />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"artist\">Artist</Label>\n          <Input type=\"text\" id=\"artist\" name=\"artist\" value={artist} onChange={formHandler} required />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"lyrics\">Lyrics</Label>\n          <Input type=\"textarea\" id=\"lyrics\" name=\"lyrics\" value={lyrics} onChange={formHandler} required />\n          {lyricsUrl && <FormText>No guarantees, but you might be able to find the rest of the lyrics at: \n          <a href={lyricsUrl} target=\"_blank\" rel=\"noopener noreferrer\">{lyricsUrl}</a></FormText>}\n        </FormGroup>\n        <Button>Create Song</Button>\n      </Form>\n    </Col>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Col } from 'reactstrap';\nimport { postNewSong } from '../../Actions/song';\nimport CreateSongForm from '../../Components/CreateSongForm/CreateSongForm';\n\nexport default function CreateSongContainer() {\n  const DEFAULT_FORM_STATE = {\n    id: null,\n    title: '',\n    artist: '',\n    lyrics: ''\n  };\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const user = useSelector( store => store.user );\n  const song = useSelector( store => store.song );\n  const [formData, setFormData] = useState(song || DEFAULT_FORM_STATE);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(function() {\n    async function submitSong() {\n      if (!formData.id) {\n        await dispatch(postNewSong(formData, user.id));\n        setIsSubmitting(false);\n        history.push('/song');\n      }\n    };\n    if (isSubmitting) {\n      submitSong();\n    };\n  }, [dispatch, isSubmitting, formData, user, history]);\n\n  const formHandler = (e) => {\n    const {name, value} = e.target;\n    setFormData( fData => ({\n      ...fData,\n      [name]: value\n    }));\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n  }\n\n  return (\n    <>\n      <Col md={8} className=\"text-center mx-auto mb-3\">\n        <h2>Create Song</h2>\n      </Col>\n      <CreateSongForm formData={formData} formHandler={formHandler} submitHandler={submitHandler} />\n    </>\n  )\n}","import React from 'react';\n\nexport default function Song({ song }) {\n  return (\n    <>\n      <h3>{song.title}</h3>\n      <h5>{song.artist}</h5>\n      <span id=\"lyrics\" className=\"mt-3\">{song.lyrics}</span>\n    </>\n  )\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Col } from 'reactstrap';\nimport Song from '../../Components/Song/Song';\n\nexport default function SongDetailContainer() {\n  const song = useSelector( store => store.song );\n\n  return (\n    <>\n      <Col className=\"text-center mx-auto mt-3\">\n        <Song song={song} />\n      </Col>\n    </>\n  )\n}","import React from 'react';\nimport { Switch, Redirect, Route } from 'react-router-dom';\nimport CreateSongContainer from './app/Containers/CreateSong/CreateSongContainer';\nimport SongDetailContainer from './app/Containers/SongDetail/SongDetailContainer';\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/createsong\" exact>\n        <CreateSongContainer />\n      </Route>\n      <Route path=\"/song\" exact>\n        <SongDetailContainer />\n      </Route>\n      <Redirect to=\"/\" />\n    </Switch>\n  )\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nexport default function SongList() {\n  const user = useSelector((store) => store.user);\n  const columns = [\n    {\n      dataField: 'artist',\n      text: 'Artist',\n    },\n    {\n      dataField: 'title',\n      text: 'Song Title',\n    },\n  ];\n\n  return <BootstrapTable bootstrap4 keyField={'id'} data={user.songs} columns={columns} />\n}\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUserDataFromApi } from '../../Actions/user';\r\nimport { Col, Row } from 'reactstrap';\r\nimport AppNav from '../../Components/AppNav/AppNav';\r\nimport Routes from '../../../routes';\r\nimport SongList from '../SongList/SongList';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const user = useSelector( store => store.user );\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(function() {\r\n    async function fetchUserData() {\r\n      await dispatch(getUserDataFromApi(user.id));\r\n      setIsLoading(false);\r\n    };\r\n    if (isLoading) {\r\n      fetchUserData();\r\n    };\r\n  }, [dispatch, isLoading, user]);\r\n\r\n  if (isLoading) return <h3>Loading</h3>\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col id=\"nav-col\" md={2}>\r\n          <AppNav />\r\n        </Col>\r\n        <Col md={10}>\r\n          <SongList />\r\n          <Routes />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { \n  FETCH_USER_DATA,\n} from '../Actions/types';\n\nconst INITIAL_STATE = {\n  id: parseInt(window.token),\n  songs: [],\n  stashes: [], \n}\n\nfunction htmlify(songs) {\n  return songs.map( song => ({\n    ...song,\n    lyrics: song.lyrics.replace(/\\n/g, '<br />')\n  }));\n}\n\nexport default function rootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case FETCH_USER_DATA:\n      const songs = htmlify(action.data.songs);\n      return {\n        ...state,\n        songs: [...songs],\n        stashes: [...action.data.stashes]\n      };\n    default:\n      return state;\n  }\n}","import { \n  CREATE_NEW_SONG,\n  CLEAR_CURRENT_SONG,\n} from '../Actions/types';\n\nconst INITIAL_STATE = {}\n\nexport default function rootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n\n    case CREATE_NEW_SONG:\n      const song = action.data;\n      return {\n        ...state,\n        id: song.id,\n        title: song.title,\n        artist: song.artist,\n        lyrics: song.lyrics,\n      };\n    \n    case CLEAR_CURRENT_SONG:\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n}","import user from './user';\nimport song from './song';\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n  user,\n  song,\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport combineReducers from \"./Reducers/root\";\r\n\r\nexport const store = createStore(\r\n  combineReducers,\r\n  compose(\r\n    applyMiddleware(thunk),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__\r\n    && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/Components/App/App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <Route path=\"/\" component={App} />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}