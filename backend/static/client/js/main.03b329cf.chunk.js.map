{"version":3,"sources":["SongStashApi.js","app/Actions/stash.js","app/Actions/types.js","app/Actions/song.js","app/Components/AppNav/AppNav.js","app/Components/SongForm/SongForm.js","app/Containers/CreateEditSong/CreateEditSongContainer.js","app/Components/DeleteButton/DeleteButton.js","app/Components/Song/Song.js","app/Containers/SongDetail/SongDetailContainer.js","app/Components/SongList/SongList.js","app/Actions/search.js","app/Containers/SearchSong/SearchSongContainer.js","app/Containers/MySongs/MySongsContainer.js","app/Components/StashNameForm/StashNameForm.js","app/Containers/Stash/StashContainer.js","app/Containers/CreateStash/CreateStashContainer.js","routes.js","app/Components/App/App.js","app/Reducers/search.js","app/Reducers/song.js","app/Reducers/stash.js","app/Reducers/root.js","app/store.js","serviceWorker.js","index.js","images/music-loader.gif"],"names":["API_URL","process","SONG_STASH_API_URL","SongStashApi","axios","get","resp","data","name","post","songId","stashId","delete","id","patch","songs","song","userId","user_id","title","artist","lyrics","query","encodeURI","fetchUserStashes","dispatch","a","fetchStashes","setStashes","postNewStash","postStash","setNewStash","type","fetchUserSongs","fetchSongs","htmlify","fetchedUserSongs","postNewSong","postSong","replace","setCurrentSong","deleteSong","getLyrics","getSongLyrics","mmId","map","AppNav","location","useLocation","useDispatch","stashes","useSelector","store","stash","clearSong","Navbar","color","dark","NavbarBrand","className","href","Nav","navbar","pills","justified","NavItem","NavbarText","to","AddCircle","NavLink","active","pathname","onClick","SongForm","toggleEdit","formData","formHandler","lyricsUrl","submitHandler","text","history","useHistory","Col","md","Form","onSubmit","FormGroup","Label","for","Input","value","onChange","required","rows","FormText","target","rel","Button","goBack","CreateEditSongContainer","editSong","useState","setFormData","e","preventDefault","fData","lyricsLocation","DeleteButton","classes","clickHandler","Song","dangerouslySetInnerHTML","__html","SongDetailContainer","useParams","parseInt","isEditing","setIsEditing","useEffect","songToSet","filter","push","songStashes","reduce","acc","song_ids","includes","label","selected","setSelected","options","forEach","addSongToStash","deleteSongFromStash","window","reload","hasSelectAll","labelledBy","SongList","rowEvents","row","rowIndex","length","bootstrap4","keyField","columns","dataField","sort","defaultSorted","order","rowStyle","cursor","hover","searchSongsApi","searchSongs","setSearchResults","SearchSongContainer","search","isSearching","setIsSearching","results","MySongsContainer","stashedSongs","songIds","StashNameForm","cancelAction","StashContainer","stashSongs","editStash","deleteStash","fontSize","style","CreateStashContainer","isAdding","setIsAdding","addStash","Routes","path","exact","App","stashesLoading","setStashesLoading","songsLoading","setSongsLoading","console","log","token","Row","src","loader","alt","INITIAL_STATE","combineReducers","state","action","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","Boolean","hostname","match","ReactDOM","render","StrictMode","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"js/main.03b329cf.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.SONG_STASH_API_URL || 'http://127.0.0.1:5000/api';\n\nexport default class SongStashApi {\n  // Stash Actions\n\n  static async fetchStashes() {\n    try {\n      const resp = await axios.get(`${API_URL}/stashes`);\n      return resp.data;\n    } \n    catch {\n      return null;\n    }\n  }\n\n  static async postStash(name) {\n    try {\n      const resp = await axios.post(`${API_URL}/stashes`, {name});\n      return resp.data;\n    } \n    catch {\n      return null;\n    }\n  }\n\n  static async addSongToStash(songId, stashId) {\n    try {\n      await axios.post(`${API_URL}/stashes/songs`, {songId, stashId});\n      return {songId, stashId};\n    } \n    catch {\n      return null;\n    }\n  }\n\n  static async deleteSongFromStash(songId, stashId) {\n    try {\n      await axios.delete(`${API_URL}/stashes/songs/${stashId}/${songId}`);\n      return {songId, stashId};\n    } \n    catch {\n      return null;\n    }\n  }\n\n  static async deleteStash(id) {\n    try {\n      await axios.delete(`${API_URL}/stashes/${id}`);\n      return true;\n    } \n    catch {\n      return null;\n    }\n  }\n\n  static async editStash(id, name) {\n    try {\n      await axios.patch(`${API_URL}/stashes/${id}`, {name});\n      return true;\n    } \n    catch {\n      return null;\n    }\n  }\n  //Song Actions\n\n  static async fetchSongs() {\n    try {\n      const resp = await axios.get(`${API_URL}/songs`);\n      return resp.data.songs;\n    } \n    catch {\n      return null;\n    }\n  }\n\n  static async postSong(song, userId) {\n    try {\n      const resp = await axios.post(`${API_URL}/songs`, {...song, user_id: userId});\n      return resp.data;\n    } \n    catch {\n      return null;\n    }\n  }\n\n  static async editSong(id, song) {\n    const {title, artist, lyrics} = song;\n    try {\n      await axios.patch(`${API_URL}/songs/${id}`, {title, artist, lyrics});\n      return true;\n    } \n    catch {\n      return null;\n    }\n  }\n\n  static async deleteSong(id) {\n    try {\n      await axios.delete(`${API_URL}/songs/${id}`)\n      return true;\n    } \n    catch {\n      return null;\n    }\n  }\n\n  static async getSongLyrics(id) {\n    try {\n      const resp = await axios.get(`${API_URL}/lyrics/${id}`);\n      return resp.data;\n    } \n    catch {\n      return null;\n    }\n  }\n\n  // Search Actions\n\n  static async searchSongs(query) {\n    try {\n      const resp = await axios.get(`${API_URL}/search/${encodeURI(query)}`);\n      return resp.data;\n    } \n    catch {\n      return null;\n    }\n  }\n\n}\n","import SongStashApi from '../../SongStashApi';\nimport { SET_STASHES, SET_NEW_STASH } from './types';\n\nexport function fetchUserStashes() {\n  return async function (dispatch) {\n    const data = await SongStashApi.fetchStashes();\n    return dispatch(setStashes(data));\n  }\n}\n\nexport function postNewStash(name) {\n  return async function(dispatch) {\n    const data = await SongStashApi.postStash(name);\n    return dispatch(setNewStash(data));\n  }\n}\n\nexport function postSongToStash(stashIds, songId) {\n  stashIds.forEach(async (stashId) => {\n    await SongStashApi.addSongToStash(songId, stashId);\n  });\n};\n\nexport function deleteSongFromUserStash(stashIds, songId) {\n  stashIds.forEach(async (stashId) => {\n    await SongStashApi.deleteSongFromStash(songId, stashId);\n  });\n}\n\nexport function setStashes(data) {\n  return {\n    type: SET_STASHES,\n    data,\n  }\n}\n\nexport function setNewStash(data) {\n  return {\n    type: SET_NEW_STASH,\n    data,\n  }\n}\n","// Song types\nexport const FETCH_USER_SONGS = 'FETCH_USER_SONGS';\nexport const SET_CURRENT_SONG = 'SET_CURRENT_SONG';\nexport const CLEAR_CURRENT_SONG = 'CLEAR_CURRENT_SONG';\nexport const DELETE_SONG = 'DELETE_SONG';\n\n// Search types\nexport const SET_SEARCH_RESULTS = 'SET_SEARCH_RESULTS';\nexport const CLEAR_SEARCH_RESULTS = 'CLEAR_SEARCH_RESULTS';\n\n// Stash types\nexport const SET_STASHES = 'SET_STASHES';\nexport const SET_NEW_STASH = 'SET_NEW_STASH';\n","import { SET_CURRENT_SONG, DELETE_SONG, FETCH_USER_SONGS } from './types';\nimport SongStashApi from '../../SongStashApi';\n\nexport function fetchUserSongs() {\n  return async function (dispatch) {\n    const data = await SongStashApi.fetchSongs();\n    const songs = htmlify(data);\n    return dispatch(fetchedUserSongs(songs));\n  }\n}\n\nexport function postNewSong(song, userId) {\n  return async function(dispatch) {\n    const data = await SongStashApi.postSong(song, userId);\n    const lyrics = data.lyrics.replace(/\\n/g, '<br />');\n    return dispatch(setCurrentSong({...data, lyrics}));\n  }\n}\n\nexport function deleteSong(id) {\n  return async function(dispatch) {\n    const resp = await SongStashApi.deleteSong(id);\n    if (resp) {\n      return dispatch(deletedSong())\n    }\n  }\n}\n\nexport function getLyrics(song) {\n  return async function(dispatch) {\n    const data = await SongStashApi.getSongLyrics(song.mmId);\n    const lyrics = data.replace(/\\n/g, '<br />');\n    return dispatch(setCurrentSong({...song, lyrics}));\n  }\n}\n\nfunction htmlify(songs) {\n  return songs.map( song => ({\n    ...song,\n    lyrics: song.lyrics.replace(/\\n/g, '<br />')\n  }));\n}\n\nexport function fetchedUserSongs(data) {\n  return {\n    type: FETCH_USER_SONGS,\n    data\n  }\n}\n\nexport function setCurrentSong(data) {\n  return {\n    type: SET_CURRENT_SONG,\n    data,\n  }\n}\n\nexport function deletedSong(){\n  return {\n    type: DELETE_SONG,\n  }\n}","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Nav, Navbar, NavbarBrand, NavItem, NavLink, NavbarText } from 'reactstrap';\nimport { AddCircle } from '@material-ui/icons';\nimport { Link, useLocation } from 'react-router-dom';\nimport { CLEAR_CURRENT_SONG } from '../../Actions/types';\nimport './AppNav.css';\n\nexport default function AppNav() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const stashes = useSelector(store => store.stash.stashes)\n  const clearSong = () => {\n    dispatch({\n      type: CLEAR_CURRENT_SONG,\n    });\n  }\n\n  return (\n    <>\n      <Navbar id=\"main-nav-bar\" color=\"dark\" dark >\n        <NavbarBrand className=\"mx-auto mt-0 mb-0 w-100 text-center\" href=\"/mysongs\">SongStash</NavbarBrand>\n        <hr className=\"mt-0 mb-2\" />\n        <Nav navbar pills justified className=\"mt-0 h-75 w-100\">\n          <NavItem className=\"mx-auto mt-0 mb-auto\">\n            <NavbarText><u>My Stashes</u>  <Link to=\"/createstash\"><AddCircle /></Link></NavbarText>\n            {stashes.map(stash => (<Link to={`/stash/${stash.id}`}><NavLink active={location.pathname === `/stash/${stash.id}`}>{stash.name}</NavLink></Link>))}\n          </NavItem>\n          <hr />\n          <NavItem className=\"mx-auto my-auto\">\n            <Link to=\"/mysongs\"><NavLink active={location.pathname === '/mysongs'}>My Songs</NavLink></Link>\n          </NavItem>\n          <hr />\n          <NavItem className=\"mx-auto my-auto\">\n            <Link to=\"/searchsongs\"><NavLink active={location.pathname === '/searchsongs'} onClick={clearSong}>Song Search</NavLink></Link>\n          </NavItem>\n          <hr />\n          <NavItem className=\"mx-auto my-auto\">\n            <Link to=\"/createsong\"><NavLink active={location.pathname === '/createsong'} onClick={clearSong}>Create Song</NavLink></Link>\n          </NavItem>\n          <hr />\n          <NavItem className=\"d-block mx-auto mt-auto\">\n            <a href=\"/logout\"><NavLink>Log Out</NavLink></a>\n          </NavItem>\n        </Nav>\n      </Navbar>\n    </>\n  )\n}","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Col, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nexport default function SongForm({ toggleEdit, formData, formHandler, lyricsUrl, submitHandler, text }) {\n  const { title, artist, lyrics } = formData;\n  const history = useHistory();\n  return (\n    <Col md={8} className=\"text-center mx-auto\">\n      <Form onSubmit={submitHandler}>\n        <FormGroup>\n          <Label for=\"title\">Title</Label>\n          <Input type=\"text\" id=\"title\" name=\"title\" value={title} onChange={formHandler} required />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"artist\">Artist</Label>\n          <Input type=\"text\" id=\"artist\" name=\"artist\" value={artist} onChange={formHandler} required />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"lyrics\">Lyrics</Label>\n          <Input type=\"textarea\" id=\"lyrics\" name=\"lyrics\" rows=\"15\" value={lyrics} onChange={formHandler} required />\n          {lyricsUrl && <FormText>No guarantees, but you might be able to find the rest of the lyrics at:\n          <br /> \n          <a href={lyricsUrl} target=\"_blank\" rel=\"noopener noreferrer\">{lyricsUrl}</a></FormText>}\n        </FormGroup>\n        <Button type=\"submit\" color=\"warning\" className=\"mr-2\">{text}</Button>\n        <Button type=\"button\" color=\"secondary\" onClick={toggleEdit ? toggleEdit : () => history.goBack()}>Cancel</Button>\n      </Form>\n    </Col>\n  )\n}","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Col } from 'reactstrap';\nimport { fetchUserSongs, postNewSong } from '../../Actions/song';\nimport SongStashApi from '../../../SongStashApi';\nimport SongForm from '../../Components/SongForm/SongForm';\n\nexport default function CreateEditSongContainer({ editSong, toggleEdit }) {\n  const DEFAULT_FORM_STATE = {\n    id: null,\n    title: '',\n    artist: '',\n    lyrics: ''\n  };\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const song = useSelector( store => store.song );\n  const lyrics = song.lyrics ? song.lyrics.replace(/<br\\s*\\/?>/mg,'\\n') : null;\n  const [formData, setFormData] = useState( {...song, lyrics} || DEFAULT_FORM_STATE);\n\n  const formHandler = (e) => {\n    const {name, value} = e.target;\n    setFormData( fData => ({\n      ...fData,\n      [name]: value\n    }));\n  };\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    if (editSong) {\n      await SongStashApi.editSong(song.id, formData);\n      toggleEdit();\n      await dispatch(fetchUserSongs());\n      history.replace(`/song/${song.id}`);\n    } else {\n        await dispatch(postNewSong(formData));\n        history.replace('/mysongs'); // Song id is null so can't redirect to song detail\n    };\n  };\n\n  return (\n    <>\n      {!editSong && <Col md={8} className=\"text-center mx-auto mb-3\">\n        <h2>Create Song</h2>\n      </Col>}\n      <SongForm \n      toggleEdit={toggleEdit}\n      formData={formData} \n      formHandler={formHandler} \n      submitHandler={submitHandler} \n      lyricsUrl={song.lyricsLocation} \n      text={editSong ? \"Update Song\" : \"Create Song\"}\n      />\n    </>\n  )\n}","import React from 'react';\nimport { Button } from 'reactstrap';\n\nexport default function DeleteButton({classes, text, clickHandler}) {\n  return (\n    <>\n      <Button color=\"danger\" className={classes} onClick={clickHandler}>{text}</Button>\n    </>\n  )\n}","import React from 'react';\nimport { Button } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nexport default function Song({ song }) {\n  return (\n    <>\n      <hr />\n      <h3>{song.title}</h3>\n      <h5>{song.artist}</h5>\n      <hr />\n      <span id=\"lyrics\" className=\"mt-3\" dangerouslySetInnerHTML = {{__html: song.lyrics}}></span>\n      {\n        song.lyricsLocation &&\n        <div className=\"mt-3\">\n          <p>Lyrics preview provided by MusixMatch. Right song? Click below to add to your songs. You will be able to edit and add more lyrics on the next screen.</p>\n          <Link to=\"/createsong\"><Button className=\"mt-2\" color=\"warning\">Add to My Songs</Button></Link>\n        </div>\n      }\n    </>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Col, Button } from 'reactstrap';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { fetchUserStashes } from '../../Actions/stash';\nimport { deleteSong, setCurrentSong, fetchUserSongs } from '../../Actions/song';\nimport CreateEditSongContainer from '../CreateEditSong/CreateEditSongContainer';\nimport SongStashApi from '../../../SongStashApi';\nimport MultiSelect from 'react-multi-select-component';\nimport DeleteButton from '../../Components/DeleteButton/DeleteButton';\nimport Song from '../../Components/Song/Song';\n\nexport default function SongDetailContainer() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const songId = parseInt(id)\n  const songs = useSelector( store => store.song.songs );\n  const stashes = useSelector( store => store.stash.stashes)\n  const song = useSelector( store => store.song );\n  const [isEditing, setIsEditing] = useState(false);\n  const toggleEdit = () => setIsEditing(!isEditing)\n\n  // Sets song on page load or redirects back to mysongs\n  useEffect(function() {\n    if (songId && songs) {\n      const songToSet = songs.filter(song => song.id === songId)[0];\n      if (!!songToSet) {\n        dispatch(setCurrentSong(songToSet));\n      } else history.push('/mysongs');\n    };\n  },[dispatch, history, songId, songs])\n\n  const songStashes = stashes.reduce((acc, stash) => {\n    if (stash.song_ids.includes(songId)) {\n      acc.push({label: stash.name, value: stash.id})\n      return acc;\n    }\n    return acc;\n  }, []);\n  const [selected, setSelected] = useState(songStashes);\n  const options = stashes.map((stash) => ({label: stash.name, value: stash.id}))\n\n  async function deleteHandler() {\n    await dispatch(deleteSong(song.id));\n    await dispatch(fetchUserSongs());\n    history.goBack();\n  }\n\n  async function updateHandler() {\n    selected.forEach(async (stash) => {\n      if (!songStashes.includes(stash)) {\n        await SongStashApi.addSongToStash(song.id, stash.value);\n      }\n    });\n    songStashes.forEach(async (stash) => {\n      if (!selected.includes(stash)) {\n        await SongStashApi.deleteSongFromStash(song.id, stash.value);\n      }\n    })\n    await dispatch(await fetchUserStashes());\n    window.location.reload(); // Last resort option to get the stashes list updating correctly\n  }\n\n  return (\n    <>\n      <Col md={12} className=\"d-flex mt-3 justify-content-between\">\n        <Button className=\"mr-auto\" onClick={() => history.goBack()}>Back</Button>\n        {song.id && <>\n        <h5 className=\"d-inline-block ml-2 my-auto\">Stashes:</h5>\n        <MultiSelect\n        hasSelectAll={false}\n        options={options}\n        value={selected}\n        onChange={setSelected}\n        labelledBy={\"Select Stashes\"}\n        className=\"d-inline-block ml-2 w-25\"\n        />\n        <Button color=\"warning\" className=\"ml-2\" onClick={updateHandler}>Update Stashes</Button>\n        <Button color=\"info\" className=\"ml-auto\" onClick={toggleEdit}>Edit Song</Button>\n        <DeleteButton text=\"Delete Song\" classes=\"ml-2\" clickHandler={deleteHandler} />\n        </>}\n      </Col>\n      <Col md={10} className=\"text-center mx-auto mt-5\">\n        {!isEditing && <Song song={song} />}\n        {isEditing && <CreateEditSongContainer toggleEdit={toggleEdit} editSong={true} />}\n      </Col>\n    </>\n  )\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nexport default function SongList({ songs, getLyrics }) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const columns = [\n    {\n      dataField: 'artist',\n      text: 'Artist',\n      sort: true,\n    },\n    {\n      dataField: 'title',\n      text: 'Song Title',\n      sort: true,\n    },\n  ];\n  const defaultSorted = [{\n    dataField: 'artist',\n    order: 'asc',\n  }]\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      if (getLyrics) {\n        dispatch(getLyrics(row));\n        history.push(`/song/searchresult`);\n      } else history.push(`/song/${row.id}`);\n    }\n  };\n\n  return (\n  <>\n    {songs.length !== 0 && <BootstrapTable \n    bootstrap4 \n    keyField={getLyrics ? 'mmId' : 'id'} \n    data={songs} \n    columns={columns} \n    defaultSorted={defaultSorted} \n    rowEvents={rowEvents}\n    rowStyle={{cursor: 'pointer'}}\n    hover\n    />}\n    {songs.length === 0 && <h6>No Songs</h6>}\n  </>\n  )\n};\n","import { SET_SEARCH_RESULTS } from './types';\nimport SongStashApi from '../../SongStashApi';\n\nexport function searchSongsApi(query) {\n  return async function(dispatch) {\n    const data = await SongStashApi.searchSongs(query);\n    return dispatch(setSearchResults(data));\n  }\n}\n\nexport function setSearchResults(data) {\n  return {\n    type: SET_SEARCH_RESULTS,\n    data,\n  };\n};","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Col, Form, FormGroup, Input } from 'reactstrap';\nimport SongList from '../../Components/SongList/SongList';\nimport { searchSongsApi } from '../../Actions/search';\nimport { getLyrics } from '../../Actions/song';\n\nexport default function SearchSongContainer() {\n  const DEFAULT_FORM_STATE = {\n    query: '',\n  };\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const search = useSelector( store => store.search );\n  const [formData, setFormData] = useState(DEFAULT_FORM_STATE);\n  const [isSearching, setIsSearching] = useState(false);\n\n  useEffect(function() {\n    async function searchSongs() {\n      if (!formData.id) {\n        await dispatch(searchSongsApi(formData.query));\n        setIsSearching(false);\n      }\n    };\n    if (isSearching) {\n      searchSongs();\n    };\n  }, [dispatch, isSearching, formData, history]);\n\n  const formHandler = (e) => {\n    const {name, value} = e.target;\n    setFormData( fData => ({\n      ...fData,\n      [name]: value\n    }));\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setIsSearching(true);\n  }\n\n  return (\n    <Col md={8} className=\"text-center mx-auto\">\n      <div className=\"my-3\">\n        <h2>Search Songs</h2>\n        <h5>Enter artist, title, or song lyrics to find new songs</h5>\n      </div>\n      <Form onSubmit={submitHandler}>\n        <FormGroup>\n          <Input className=\"text-center\" type=\"text\" id=\"query\" name=\"query\" value={formData.query} onChange={formHandler} required />\n        </FormGroup>\n        <Button className=\"mb-3\">Search</Button>\n      </Form>\n      {search.results && <SongList songs={search.results} getLyrics={getLyrics} />}\n    </Col>\n  )\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Col } from 'reactstrap';\nimport SongList from '../../Components/SongList/SongList';\n\nexport default function MySongsContainer() {\n  const songs = useSelector( store => store.song.songs );\n  const stashes = useSelector( store => store.stash.stashes );\n  const stashedSongs = [];\n\n  function filteredSongs(songIds){\n    songIds.forEach(id => {\n      if (!stashedSongs.includes(id)) {\n        stashedSongs.push(id);\n      };\n    });\n    return songs.filter(song => songIds.includes(song.id));\n  }\n\n  return (\n    <Col md={8} className=\"text-center mx-auto\">\n      <div className=\"my-3\">\n        <h2>My Songs</h2>\n        {songs.length === 0 && <h5 className=\"text-info\">You don't have any songs yet.<br />Click Song Search or Create Song to add some new ones!</h5>}\n      </div>\n      {\n        stashes.map(stash => (\n        <>\n          <hr />\n          <h5>{stash.name}</h5>\n          <SongList songs={filteredSongs(stash.song_ids)} />\n        </>\n        ))\n      }\n      <hr />\n      <h5>Unstashed Songs</h5>\n      <SongList songs={songs.filter(song => !stashedSongs.includes(song.id))} />\n    </Col>\n  )\n}","import React from 'react';\nimport { Button, Form, FormGroup, Input, Label } from 'reactstrap';\n\nexport default function StashNameForm({ cancelAction, text, formData, formHandler, submitHandler }) {\n  return (\n    <Form onSubmit={submitHandler}>\n      <FormGroup>\n        <Label for=\"name\">Stash Name</Label>\n        <Input className=\"text-center\" type=\"text\" id=\"name\" name=\"name\" value={formData.name} onChange={formHandler} required />\n      </FormGroup>\n      <Button type=\"submit\" color=\"warning\" className=\"mb-3 mr-2\">{text}</Button>\n      <Button type=\"button\" color=\"secondary\" className=\"mb-3\" onClick={cancelAction}>Cancel</Button>\n    </Form>\n  )\n}\n\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Col, Button } from 'reactstrap';\nimport DeleteButton from '../../Components/DeleteButton/DeleteButton';\nimport SongList from '../../Components/SongList/SongList';\nimport StashNameForm from '../../Components/StashNameForm/StashNameForm';\nimport SongStashApi from '../../../SongStashApi';\nimport { fetchUserStashes } from '../../Actions/stash';\nimport EditIcon from '@material-ui/icons/Edit';\n\nexport default function StashContainer() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { id } = useParams();\n  const stashId = parseInt(id)\n  const stashes = useSelector(store => store.stash.stashes);\n  const stash = stashes.filter(stash => stash.id === stashId)[0];\n  const songs = useSelector(store => store.song.songs);\n  const stashSongs = songs.filter(song => stash.song_ids.includes(song.id));\n  const [formData, setFormData] = useState();\n  const [isEditing, setIsEditing] = useState(false);\n  const toggleEdit = () => setIsEditing(!isEditing)\n\n  // Handles non-existent or unauthorized stash access and setting form data\n  useEffect(() => {\n    if (!stashId || !stash) {\n      history.goBack();\n    } else setFormData({name: stash.name})\n  }, [setFormData, stash, stashId, history])\n\n  const formHandler = (e) => {\n    const {name, value} = e.target;\n    setFormData( fData => ({\n      ...fData,\n      [name]: value\n    }));\n  };\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    await SongStashApi.editStash(id, formData.name)\n    setIsEditing(false);\n    dispatch(fetchUserStashes());\n  }\n\n  async function deleteHandler() {\n    await SongStashApi.deleteStash(id);\n    dispatch(fetchUserStashes());\n    history.goBack();\n  }\n\n  return (\n    <>\n      <Col md={12} className=\"d-flex mt-3 justify-content-between\">\n        <Button className=\"mr-auto\" onClick={() => history.goBack()}>Back</Button>\n        <DeleteButton text=\"Delete Stash\" classes=\"ml-auto\" clickHandler={deleteHandler} />\n      </Col>\n      <Col md={10} className=\"text-center mx-auto my-3\">\n        {!isEditing && stash && <h5 className=\"d-inline-block mr-2\">{stash.name}</h5>}\n        {isEditing && \n        <StashNameForm \n        cancelAction={toggleEdit} \n        formData={formData} \n        formHandler={formHandler} \n        submitHandler={submitHandler} \n        text=\"Update\" />}\n        {!isEditing && <EditIcon className=\"mb-2\" fontSize=\"small\" onClick={toggleEdit} style={{cursor: \"pointer\"}} />}\n        <SongList songs={stashSongs} />\n      </Col>\n    </>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Col } from 'reactstrap';\nimport StashNameForm from '../../Components/StashNameForm/StashNameForm';\nimport { postNewStash } from '../../Actions/stash';\n\nexport default function CreateStashContainer() {\n  const DEFAULT_FORM_STATE = {\n    name: '',\n  };\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [formData, setFormData] = useState(DEFAULT_FORM_STATE);\n  const [isAdding, setIsAdding] = useState(false);\n\n  useEffect(function() {\n    async function addStash() {\n      if (!formData.id) {\n        await dispatch(postNewStash(formData.name));\n        setIsAdding(false);\n        history.push('/');\n      }\n    };\n    if (isAdding) {\n      addStash();\n    };\n  }, [dispatch, isAdding, formData, history]);\n\n  const formHandler = (e) => {\n    const {name, value} = e.target;\n    setFormData( fData => ({\n      ...fData,\n      [name]: value\n    }));\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setIsAdding(true);\n  }\n\n  const cancelAction = () => history.goBack();\n\n\n  return (\n    <>\n    <Col md={10} className=\"text-center mx-auto my-3\">\n      <h4>Create Stash</h4>\n      <StashNameForm  cancelAction={cancelAction} formData={formData} formHandler={formHandler} submitHandler={submitHandler} text=\"Create Stash\" />\n    </Col>\n  </>\n  )\n}","import React from 'react';\nimport { Switch, Redirect, Route } from 'react-router-dom';\nimport CreateEditSongContainer from './app/Containers/CreateEditSong/CreateEditSongContainer';\nimport SongDetailContainer from './app/Containers/SongDetail/SongDetailContainer';\nimport SearchSongContainer from './app/Containers/SearchSong/SearchSongContainer';\nimport MySongsContainer from './app/Containers/MySongs/MySongsContainer';\nimport StashContainer from './app/Containers/Stash/StashContainer';\nimport CreateStashContainer from './app/Containers/CreateStash/CreateStashContainer';\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/mysongs\" exact>\n        <MySongsContainer />\n      </Route>\n      <Route path=\"/createsong\" exact>\n        <CreateEditSongContainer />\n      </Route>\n      <Route path=\"/createstash\" exact>\n        <CreateStashContainer />\n      </Route>\n      <Route path=\"/searchsongs\" exact>\n        <SearchSongContainer />\n      </Route>\n      <Route path=\"/song/:id\">\n        <SongDetailContainer />\n      </Route>\n      <Route path=\"/stash/:id\" >\n        <StashContainer />\n      </Route>\n      <Redirect to=\"/mysongs\" />\n    </Switch>\n  )\n}","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchUserStashes } from '../../Actions/stash';\r\nimport { fetchUserSongs } from '../../Actions/song';\r\nimport { Col, Row } from 'reactstrap';\r\nimport AppNav from '../../Components/AppNav/AppNav';\r\nimport Routes from '../../../routes';\r\nimport loader from '../../../images/music-loader.gif';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const [stashesLoading, setStashesLoading] = useState(true);\r\n  const [songsLoading, setSongsLoading] = useState(true);\r\n  console.log(window.token);\r\n\r\n  useEffect(function() {\r\n    async function fetchStashes() {\r\n      await dispatch(fetchUserStashes());\r\n      setStashesLoading(false);\r\n    };\r\n    if (stashesLoading) {\r\n      fetchStashes();\r\n    };\r\n  }, [dispatch, stashesLoading]);\r\n\r\n  useEffect(function() {\r\n    async function fetchSongs() {\r\n      await dispatch(fetchUserSongs());\r\n      setSongsLoading(false);\r\n    };\r\n    if (songsLoading) {\r\n      fetchSongs();\r\n    };\r\n  }, [dispatch, songsLoading]);\r\n\r\n  return (\r\n    <>\r\n      <Row className=\"vh-100\">\r\n        <Col md={2}>\r\n          {!stashesLoading && <AppNav />}\r\n        </Col>\r\n        <Col md={10}>\r\n          {stashesLoading && songsLoading && <img className=\"d-block m-auto\" src={loader} alt=\"Music loader\" />}\r\n          {!stashesLoading && !songsLoading && <Routes />}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { \n  SET_SEARCH_RESULTS,\n  CLEAR_SEARCH_RESULTS\n} from '../Actions/types';\n\nconst INITIAL_STATE = {}\n\nexport default function rootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    \n    case SET_SEARCH_RESULTS:\n      const results = action.data;\n      return {\n        ...state,\n        results\n      }\n    \n    case CLEAR_SEARCH_RESULTS:\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n}","import { \n  FETCH_USER_SONGS,\n  SET_CURRENT_SONG,\n  CLEAR_CURRENT_SONG, \n  DELETE_SONG,\n} from '../Actions/types';\n\nconst INITIAL_STATE = {}\n\nexport default function rootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n\n    case FETCH_USER_SONGS:\n      return {\n        ...state,\n        songs: [...action.data]\n      }\n    \n    case SET_CURRENT_SONG:\n      const song = action.data;\n      return {\n        ...state,\n        id: song.id ? song.id : null,\n        title: song.title,\n        artist: song.artist,\n        lyrics: song.lyrics,\n        lyricsLocation: song.lyricsLocation ? song.lyricsLocation : null,\n      }\n    \n    case CLEAR_CURRENT_SONG:\n      return {\n        ...state,\n        id: '',\n        title: '',\n        artist: '',\n        lyrics: '',\n        lyricsLocation: ''\n      };\n\n    case DELETE_SONG:\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n}","import { \n  SET_STASHES,\n  SET_NEW_STASH,\n} from '../Actions/types';\n\nconst INITIAL_STATE = {}\n\nexport default function rootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    \n    case SET_STASHES:\n      return {\n        ...state,\n        ...action.data\n      }\n\n    case SET_NEW_STASH:\n      return {\n        ...state,\n        stashes: [...state.stashes, action.data]\n        };\n\n    default:\n      return state;\n  }\n}","import search from './search';\nimport song from './song';\nimport stash from './stash';\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n  search,\n  song,\n  stash,\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport combineReducers from \"./Reducers/root\";\r\n\r\nexport const store = createStore(\r\n  combineReducers,\r\n  compose(\r\n    applyMiddleware(thunk),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__\r\n    && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/Components/App/App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <Route path=\"/\" component={App} />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"media/music-loader.5dc251b2.gif\";"],"sourceRoot":""}