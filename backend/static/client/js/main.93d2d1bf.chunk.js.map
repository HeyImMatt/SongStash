{"version":3,"sources":["SongStashApi.js","app/Actions/stash.js","app/Actions/types.js","app/Actions/song.js","app/Components/AppNav/AppNav.js","app/Components/CreateSongForm/CreateSongForm.js","app/Containers/CreateSong/CreateSongContainer.js","app/Components/DeleteButton/DeleteButton.js","app/Components/Song/Song.js","app/Containers/SongDetail/SongDetailContainer.js","app/Components/SongList/SongList.js","app/Actions/search.js","app/Containers/SearchSong/SearchSongContainer.js","app/Components/CreateStash/CreateStash.js","app/Containers/Stash/StashContainer.js","routes.js","app/Components/App/App.js","app/Reducers/search.js","app/Reducers/song.js","app/Reducers/stash.js","app/Reducers/root.js","app/store.js","serviceWorker.js","index.js","images/music-loader.gif"],"names":["API_URL","process","SONG_STASH_API_URL","SongStashApi","songId","stashId","axios","post","delete","fetchUserStashes","dispatch","a","get","resp","type","data","postNewStash","name","postSongToStash","stashIds","forEach","addSongToStash","deleteSongFromUserStash","deleteSongFromStash","fetchUserSongs","songs","htmlify","postNewSong","song","userId","user_id","lyrics","replace","setCurrentSong","deleteSong","id","status","getLyrics","mmId","map","AppNav","useDispatch","stashes","useSelector","store","stash","clearSong","Navbar","color","dark","NavbarBrand","className","href","Nav","navbar","pills","justified","NavItem","NavbarText","to","AddCircle","NavLink","onClick","CreateSongForm","formData","formHandler","lyricsUrl","submitHandler","title","artist","Col","md","Form","onSubmit","FormGroup","Label","for","Input","value","onChange","required","FormText","target","rel","Button","CreateSongContainer","history","useHistory","useState","setFormData","isSubmitting","setIsSubmitting","useEffect","push","submitSong","e","fData","preventDefault","lyricsLocation","DeleteButton","classes","text","clickHandler","Song","dangerouslySetInnerHTML","__html","SongDetailContainer","songStashes","reduce","acc","song_ids","includes","label","selected","setSelected","options","goBack","newStashIds","deleteStashIds","hasSelectAll","labelledBy","SongList","userSongs","rowEvents","row","rowIndex","bootstrap4","keyField","columns","dataField","sort","defaultSorted","order","searchSongsApi","query","encodeURI","SearchSongContainer","search","isSearching","setIsSearching","searchSongs","results","CreateStash","StashContainer","location","useLocation","isAdding","setIsAdding","addStash","pathname","Routes","path","exact","App","stashesLoading","setStashesLoading","songsLoading","setSongsLoading","fetchStashes","fetchSongs","Row","src","loader","alt","INITIAL_STATE","combineReducers","state","action","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","hostname","match","ReactDOM","render","StrictMode","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"js/main.93d2d1bf.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.SONG_STASH_API_URL || 'http://127.0.0.1:5000/api';\n\nexport default class SongStashApi {\n  static async addSongToStash(songId, stashId) {\n    try {\n      await axios.post(`${API_URL}/stashes/songs`, {songId, stashId});\n      return {songId, stashId};\n    } catch {\n        return null;\n    }\n  }\n\n  static async deleteSongFromStash(songId, stashId) {\n    try {\n      await axios.delete(`${API_URL}/stashes/songs/${stashId}/${songId}`);\n      return {songId, stashId};\n    } catch {\n        return null;\n    }\n  }\n}","import axios from 'axios';\nimport SongStashApi from '../../SongStashApi';\nimport { SET_STASHES, SET_NEW_STASH } from './types';\n\nconst API_URL = process.env.SONG_STASH_API_URL || 'http://127.0.0.1:5000/api';\n\nexport function fetchUserStashes() {\n  return async function (dispatch) {\n    const resp = await axios.get(`${API_URL}/stashes`);\n    return dispatch(setStashes(resp.data));\n  }\n}\n\nexport function postNewStash(name) {\n  return async function(dispatch) {\n    const resp = await axios.post(`${API_URL}/stashes`, {name});\n    return dispatch(setNewStash(resp.data));\n  }\n}\n\nexport function postSongToStash(stashIds, songId) {\n  stashIds.forEach(async (stashId) => {\n    await SongStashApi.addSongToStash(songId, stashId);\n  });\n};\n\nexport function deleteSongFromUserStash(stashIds, songId) {\n  stashIds.forEach(async (stashId) => {\n    await SongStashApi.deleteSongFromStash(songId, stashId);\n  });\n}\n\nexport function setStashes(data) {\n  return {\n    type: SET_STASHES,\n    data,\n  }\n}\n\nexport function setNewStash(data) {\n  return {\n    type: SET_NEW_STASH,\n    data,\n  }\n}\n","// Song types\nexport const FETCH_USER_SONGS = 'FETCH_USER_SONGS';\nexport const SET_CURRENT_SONG = 'SET_CURRENT_SONG';\nexport const CLEAR_CURRENT_SONG = 'CLEAR_CURRENT_SONG';\nexport const DELETE_SONG = 'DELETE_SONG';\n\n// Search types\nexport const SET_SEARCH_RESULTS = 'SET_SEARCH_RESULTS';\nexport const CLEAR_SEARCH_RESULTS = 'CLEAR_SEARCH_RESULTS';\n\n// Stash types\nexport const SET_STASHES = 'SET_STASHES';\nexport const SET_NEW_STASH = 'SET_NEW_STASH';\n","import axios from 'axios';\nimport { SET_CURRENT_SONG, DELETE_SONG, FETCH_USER_SONGS } from './types';\n\nconst API_URL = process.env.SONG_STASH_API_URL || 'http://127.0.0.1:5000/api';\n\nexport function fetchUserSongs() {\n  return async function (dispatch) {\n    const resp = await axios.get(`${API_URL}/songs`);\n    const songs = htmlify(resp.data.songs);\n    return dispatch(fetchedUserSongs(songs));\n  }\n}\n\nexport function postNewSong(song, userId) {\n  return async function(dispatch) {\n    const resp = await axios.post(`${API_URL}/songs`, {...song, user_id: userId});\n    const lyrics = resp.data.lyrics.replace(/\\n/g, '<br />');\n    return dispatch(setCurrentSong({...resp.data, lyrics}));\n  }\n}\n\nexport function deleteSong(id) {\n  return async function(dispatch) {\n    const resp = await axios.delete(`${API_URL}/songs/${id}`)\n    if (resp.status === \"200\") {\n      return dispatch(deletedSong())\n    }\n\n  }\n}\n\nexport function getLyrics(song) {\n  return async function(dispatch) {\n    const resp = await axios.get(`${API_URL}/lyrics/${song.mmId}`);\n    const lyrics = resp.data.replace(/\\n/g, '<br />');\n    return dispatch(setCurrentSong({...song, lyrics}));\n  }\n}\n\nfunction htmlify(songs) {\n  return songs.map( song => ({\n    ...song,\n    lyrics: song.lyrics.replace(/\\n/g, '<br />')\n  }));\n}\n\nexport function fetchedUserSongs(data) {\n  return {\n    type: FETCH_USER_SONGS,\n    data\n  }\n}\n\nexport function setCurrentSong(data) {\n  return {\n    type: SET_CURRENT_SONG,\n    data,\n  }\n}\n\nexport function deletedSong(){\n  return {\n    type: DELETE_SONG,\n  }\n}","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Nav, Navbar, NavbarBrand, NavItem, NavLink, NavbarText } from 'reactstrap';\nimport { AddCircle } from '@material-ui/icons';\nimport { Link } from 'react-router-dom';\nimport { CLEAR_CURRENT_SONG } from '../../Actions/types';\nimport './AppNav.css';\n\nexport default function AppNav() {\n  const dispatch = useDispatch();\n  const stashes = useSelector(store => store.stash.stashes)\n  const clearSong = () => {\n    dispatch({\n      type: CLEAR_CURRENT_SONG,\n    });\n  }\n\n  return (\n    <>\n      <Navbar id=\"main-nav-bar\" color=\"dark\" dark >\n        <NavbarBrand className=\"mx-auto w-100 text-center\" href=\"/\">SongStash</NavbarBrand>\n        <Nav navbar pills justified className=\"h-75 w-100\">\n          <hr />\n          <NavItem className=\"mx-auto my-auto\">\n            <NavbarText>My Stashes  <Link to=\"/stash/createstash\"><AddCircle /></Link></NavbarText>\n            {stashes.map(stash => (<Link to={`/stash/${stash.id}`}><NavLink>{stash.name}</NavLink></Link>))}\n          </NavItem>\n          <hr />\n          <NavItem className=\"mx-auto my-auto\">\n            <Link to=\"/mysongs\"><NavLink>My Songs</NavLink></Link>\n          </NavItem>\n          <hr />\n          <NavItem className=\"mx-auto my-auto\">\n            <Link to=\"/searchsongs\"><NavLink onClick={clearSong}>Song Search</NavLink></Link>\n          </NavItem>\n          <hr />\n          <NavItem className=\"mx-auto my-auto\">\n            <Link to=\"/createsong\"><NavLink onClick={clearSong}>Create Song</NavLink></Link>\n          </NavItem>\n          <hr />\n          <NavItem className=\"d-block mx-auto mt-auto\">\n            <Link to=\"/logout\"><NavLink>Log Out</NavLink></Link>\n          </NavItem>\n        </Nav>\n      </Navbar>\n    </>\n  )\n}","import React from 'react';\nimport { Button, Col, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nexport default function CreateSongForm({ formData, formHandler, lyricsUrl, submitHandler }) {\n  const { title, artist, lyrics } = formData;\n  return (\n    <Col md={8} className=\"text-center mx-auto\">\n      <Form onSubmit={submitHandler}>\n        <FormGroup>\n          <Label for=\"title\">Title</Label>\n          <Input type=\"text\" id=\"title\" name=\"title\" value={title} onChange={formHandler} required />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"artist\">Artist</Label>\n          <Input type=\"text\" id=\"artist\" name=\"artist\" value={artist} onChange={formHandler} required />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"lyrics\">Lyrics</Label>\n          <Input type=\"textarea\" id=\"lyrics\" name=\"lyrics\" value={lyrics} onChange={formHandler} required />\n          {lyricsUrl && <FormText>No guarantees, but you might be able to find the rest of the lyrics at: \n          <a href={lyricsUrl} target=\"_blank\" rel=\"noopener noreferrer\">{lyricsUrl}</a></FormText>}\n        </FormGroup>\n        <Button>Create Song</Button>\n      </Form>\n    </Col>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Col } from 'reactstrap';\nimport { postNewSong } from '../../Actions/song';\nimport CreateSongForm from '../../Components/CreateSongForm/CreateSongForm';\n\nexport default function CreateSongContainer() {\n  const DEFAULT_FORM_STATE = {\n    id: null,\n    title: '',\n    artist: '',\n    lyrics: ''\n  };\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const song = useSelector( store => store.song );\n  const lyrics = song.lyrics ? song.lyrics.replace(/<br\\s*\\/?>/mg,'\\n') : null;\n  const [formData, setFormData] = useState( {...song, lyrics} || DEFAULT_FORM_STATE);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(function() {\n    async function submitSong() {\n      if (!formData.id) {\n        await dispatch(postNewSong(formData));\n        setIsSubmitting(false);\n        history.push('/song');\n      }\n    };\n    if (isSubmitting) {\n      submitSong();\n    };\n  }, [dispatch, isSubmitting, formData, history]);\n\n  const formHandler = (e) => {\n    const {name, value} = e.target;\n    setFormData( fData => ({\n      ...fData,\n      [name]: value\n    }));\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n  }\n\n  return (\n    <>\n      <Col md={8} className=\"text-center mx-auto mb-3\">\n        <h2>Create Song</h2>\n      </Col>\n      <CreateSongForm \n      formData={formData} \n      formHandler={formHandler} \n      submitHandler={submitHandler} \n      lyricsUrl={song.lyricsLocation} \n      />\n    </>\n  )\n}","import React from 'react';\nimport { Button } from 'reactstrap';\n\nexport default function DeleteButton({classes, text, clickHandler}) {\n  return (\n    <>\n      <Button color=\"danger\" className={classes} onClick={clickHandler}>{text}</Button>\n    </>\n  )\n}","import React from 'react';\nimport { Button } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nexport default function Song({ song }) {\n  return (\n    <>\n      <hr />\n      <h3>{song.title}</h3>\n      <h5>{song.artist}</h5>\n      <hr />\n      <span id=\"lyrics\" className=\"mt-3\" dangerouslySetInnerHTML = {{__html: song.lyrics}}></span>\n      {\n        song.lyricsLocation &&\n        <div className=\"mt-3\">\n          <p>Lyrics preview provided by MusixMatch. Right song? Click below to add to your songs. You will be able to edit and add more lyrics on the next screen.</p>\n          <Link to=\"/createsong\"><Button className=\"mt-2\">Add to My Songs</Button></Link>\n        </div>\n      }\n    </>\n  )\n}","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Col, Button } from 'reactstrap';\nimport { useHistory } from 'react-router-dom';\nimport { fetchUserStashes } from '../../Actions/stash';\nimport { deleteSong } from '../../Actions/song';\nimport { postSongToStash, deleteSongFromUserStash } from '../../Actions/stash';\nimport MultiSelect from 'react-multi-select-component';\nimport DeleteButton from '../../Components/DeleteButton/DeleteButton';\nimport Song from '../../Components/Song/Song';\n\nexport default function SongDetailContainer() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const song = useSelector( store => store.song );\n  const stashes = useSelector( store => store.stash.stashes)\n  const songStashes = stashes.reduce((acc, stash) => {\n    if (stash.song_ids.includes(song.id)) {\n      acc.push({label: stash.name, value: stash.id})\n      return acc;\n    }\n    return acc;\n  }, []);\n  const [selected, setSelected] = useState(songStashes);\n  const options = stashes.map((stash) => ({label: stash.name, value: stash.id}))\n\n  async function deleteHandler() {\n    await dispatch(deleteSong(song.id));\n    history.goBack();\n  }\n\n  async function updateHandler() {\n    const newStashIds = [];\n    const deleteStashIds = [];\n    selected.forEach((stash) => {\n      if (!songStashes.includes(stash)) {\n        newStashIds.push(stash.value)\n      }\n    });\n    songStashes.forEach((stash) => {\n      if (!selected.includes(stash)) {\n        deleteStashIds.push(stash.value)\n      }\n    })\n    await postSongToStash(newStashIds, song.id);\n    await deleteSongFromUserStash(deleteStashIds, song.id);\n    await dispatch(fetchUserStashes());\n  }\n\n  return (\n    <>\n      <Col md={10} className=\"d-flex mt-3 justify-content-between\">\n        <Button className=\"mr-auto\" onClick={() => history.goBack()}>Back</Button>\n        <h5 className=\"d-inline-block ml-2 my-auto\">Stashes:</h5>\n        <MultiSelect\n        hasSelectAll={false}\n        options={options}\n        value={selected}\n        onChange={setSelected}\n        labelledBy={\"Select Stashes\"}\n        className=\"d-inline-block ml-2 w-50\"\n        />\n        <Button color=\"warning\" className=\"ml-2\" onClick={updateHandler}>Update</Button>\n        <DeleteButton text=\"Delete Song\" classes=\"ml-auto\" clickHandler={deleteHandler} />\n      </Col>\n      <Col md={10} className=\"text-center mx-auto mt-5\">\n        <Song song={song} />\n      </Col>\n    </>\n  )\n}","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setCurrentSong } from '../../Actions/song';\nimport { useHistory } from 'react-router-dom';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nexport default function SongList({ songs, getLyrics }) {\n  // Note: pass in songs from My Songs or Search containers and then remove user line below\n  const userSongs = useSelector((store) => store.song.songs);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const columns = [\n    {\n      dataField: 'artist',\n      text: 'Artist',\n      sort: true,\n    },\n    {\n      dataField: 'title',\n      text: 'Song Title',\n      sort: true,\n    },\n  ];\n  const defaultSorted = [{\n    dataField: 'artist',\n    order: 'asc',\n  }]\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      if (songs) {\n        dispatch(getLyrics(row));\n      } else dispatch(setCurrentSong(row));\n      history.push('/song');\n    }\n  };\n\n  return <BootstrapTable \n  bootstrap4 \n  keyField={songs ? 'mmId' : 'id'} \n  data={songs || userSongs} \n  columns={columns} \n  defaultSorted={defaultSorted} \n  rowEvents={rowEvents}\n  />\n}\n","import axios from 'axios';\nimport { SET_SEARCH_RESULTS } from './types';\n\nconst API_URL = process.env.SONG_STASH_API_URL || 'http://127.0.0.1:5000/api';\n\nexport function searchSongsApi(query) {\n  return async function(dispatch) {\n    const resp = await axios.get(`${API_URL}/search/${encodeURI(query)}`);\n    return dispatch(setSearchResults(resp.data));\n  }\n}\n\nexport function setSearchResults(data) {\n  return {\n    type: SET_SEARCH_RESULTS,\n    data,\n  };\n};","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Col, Form, FormGroup, Input } from 'reactstrap';\nimport SongList from '../../Components/SongList/SongList';\nimport { searchSongsApi } from '../../Actions/search';\nimport { getLyrics } from '../../Actions/song';\n\nexport default function SearchSongContainer() {\n  const DEFAULT_FORM_STATE = {\n    query: '',\n  };\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const search = useSelector( store => store.search );\n  const [formData, setFormData] = useState(DEFAULT_FORM_STATE);\n  const [isSearching, setIsSearching] = useState(false);\n\n  useEffect(function() {\n    async function searchSongs() {\n      if (!formData.id) {\n        await dispatch(searchSongsApi(formData.query));\n        setIsSearching(false);\n      }\n    };\n    if (isSearching) {\n      searchSongs();\n    };\n  }, [dispatch, isSearching, formData, history]);\n\n  const formHandler = (e) => {\n    const {name, value} = e.target;\n    setFormData( fData => ({\n      ...fData,\n      [name]: value\n    }));\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setIsSearching(true);\n  }\n\n  return (\n    <Col md={8} className=\"text-center mx-auto\">\n      <div className=\"my-3\">\n        <h2>Search Songs</h2>\n        <h5>Enter artist, title, or song lyrics to find new songs</h5>\n      </div>\n      <Form onSubmit={submitHandler}>\n        <FormGroup>\n          <Input type=\"text\" id=\"query\" name=\"query\" value={formData.query} onChange={formHandler} required />\n        </FormGroup>\n        <Button className=\"mb-3\">Search</Button>\n      </Form>\n      {search.results && <SongList songs={search.results} getLyrics={getLyrics} />}\n    </Col>\n  )\n}","import React from 'react';\nimport { Button, Form, FormGroup, Input, Label } from 'reactstrap';\n\nexport default function CreateStash({ formData, formHandler, submitHandler }) {\n  return (\n    <>\n      <h2>Add a New Stash</h2>\n      <Form onSubmit={submitHandler}>\n            <FormGroup>\n              <Label for=\"name\">Stash Name</Label>\n              <Input type=\"text\" id=\"name\" name=\"name\" value={formData.name} onChange={formHandler} required />\n            </FormGroup>\n            <Button className=\"mb-3\">Add Stash</Button>\n          </Form>\n    </>\n  )\n}\n\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Col } from 'reactstrap';\nimport CreateStash from '../../Components/CreateStash/CreateStash';\nimport { postNewStash } from '../../Actions/stash';\n\nexport default function StashContainer() {\n  const DEFAULT_FORM_STATE = {\n    name: '',\n  };\n  const dispatch = useDispatch();\n  let location = useLocation();\n  const history = useHistory();\n  const [formData, setFormData] = useState(DEFAULT_FORM_STATE);\n  const [isAdding, setIsAdding] = useState(false);\n\n  useEffect(function() {\n    async function addStash() {\n      if (!formData.id) {\n        await dispatch(postNewStash(formData.name));\n        setIsAdding(false);\n        history.push('/');\n      }\n    };\n    if (isAdding) {\n      addStash();\n    };\n  }, [dispatch, isAdding, formData, history]);\n\n  const formHandler = (e) => {\n    const {name, value} = e.target;\n    setFormData( fData => ({\n      ...fData,\n      [name]: value\n    }));\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setIsAdding(true);\n  }\n\n  return (\n    <Col md={8} className=\"text-center mx-auto\">\n      <div className=\"my-3\">\n        { location.pathname === '/stash/createstash' && <CreateStash formData={formData} formHandler={formHandler} submitHandler={submitHandler} />}\n      </div>\n    </Col>\n  )\n}","import React from 'react';\nimport { Switch, Redirect, Route } from 'react-router-dom';\nimport CreateSongContainer from './app/Containers/CreateSong/CreateSongContainer';\nimport SongDetailContainer from './app/Containers/SongDetail/SongDetailContainer';\nimport SearchSongContainer from './app/Containers/SearchSong/SearchSongContainer';\nimport SongList from './app/Components/SongList/SongList';\nimport StashContainer from './app/Containers/Stash/StashContainer';\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/mysongs\" exact>\n        <SongList />\n      </Route>\n      <Route path=\"/createsong\" exact>\n        <CreateSongContainer />\n      </Route>\n      <Route path=\"/searchsongs\" exact>\n        <SearchSongContainer />\n      </Route>\n      <Route path=\"/song\" exact>\n        <SongDetailContainer />\n      </Route>\n      <Route path=\"/stash/:id\" >\n        <StashContainer />\n      </Route>\n      <Redirect to=\"/\" />\n    </Switch>\n  )\n}","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchUserStashes } from '../../Actions/stash';\r\nimport { fetchUserSongs } from '../../Actions/song';\r\nimport { Col, Row } from 'reactstrap';\r\nimport AppNav from '../../Components/AppNav/AppNav';\r\nimport Routes from '../../../routes';\r\nimport './App.css';\r\nimport loader from '../../../images/music-loader.gif';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const [stashesLoading, setStashesLoading] = useState(true);\r\n  const [songsLoading, setSongsLoading] = useState(true);\r\n\r\n  useEffect(function() {\r\n    async function fetchStashes() {\r\n      await dispatch(fetchUserStashes());\r\n      setStashesLoading(false);\r\n    };\r\n    if (stashesLoading) {\r\n      fetchStashes();\r\n    };\r\n  }, [dispatch, stashesLoading]);\r\n\r\n  useEffect(function() {\r\n    async function fetchSongs() {\r\n      await dispatch(fetchUserSongs());\r\n      setSongsLoading(false);\r\n    };\r\n    if (songsLoading) {\r\n      fetchSongs();\r\n    };\r\n  }, [dispatch, songsLoading]);\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col id=\"nav-col\" md={2}>\r\n          {!stashesLoading && <AppNav />}\r\n        </Col>\r\n        <Col md={10}>\r\n          {stashesLoading && songsLoading && <img className=\"d-block m-auto\" src={loader} alt=\"Music loader\" />}\r\n          {!stashesLoading && !songsLoading && <Routes />}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { \n  SET_SEARCH_RESULTS,\n  CLEAR_SEARCH_RESULTS\n} from '../Actions/types';\n\nconst INITIAL_STATE = {}\n\nexport default function rootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    \n    case SET_SEARCH_RESULTS:\n      const results = action.data;\n      return {\n        ...state,\n        results\n      }\n    \n    case CLEAR_SEARCH_RESULTS:\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n}","import { \n  FETCH_USER_SONGS,\n  SET_CURRENT_SONG,\n  CLEAR_CURRENT_SONG, \n  DELETE_SONG,\n} from '../Actions/types';\n\nconst INITIAL_STATE = {}\n\nexport default function rootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n\n    case FETCH_USER_SONGS:\n      return {\n        ...state,\n        songs: [...action.data]\n      }\n    \n    case SET_CURRENT_SONG:\n      const song = action.data;\n      return {\n        ...state,\n        id: song.id ? song.id : null,\n        title: song.title,\n        artist: song.artist,\n        lyrics: song.lyrics,\n        lyricsLocation: song.lyricsLocation ? song.lyricsLocation : null,\n      }\n    \n    case CLEAR_CURRENT_SONG:\n      return {\n        ...state,\n        id: '',\n        title: '',\n        artist: '',\n        lyrics: '',\n        lyricsLocation: ''\n      };\n\n    case DELETE_SONG:\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n}","import { \n  SET_STASHES,\n  SET_NEW_STASH,\n} from '../Actions/types';\n\nconst INITIAL_STATE = {}\n\nexport default function rootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    \n    case SET_STASHES:\n      return {\n        ...state,\n        ...action.data\n      }\n\n    case SET_NEW_STASH:\n      return {\n        ...state,\n        stashes: [...state.stashes, action.data]\n        };\n\n    default:\n      return state;\n  }\n}","import search from './search';\nimport song from './song';\nimport stash from './stash';\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n  search,\n  song,\n  stash,\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport combineReducers from \"./Reducers/root\";\r\n\r\nexport const store = createStore(\r\n  combineReducers,\r\n  compose(\r\n    applyMiddleware(thunk),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__\r\n    && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/Components/App/App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <Route path=\"/\" component={App} />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"media/music-loader.5dc251b2.gif\";"],"sourceRoot":""}