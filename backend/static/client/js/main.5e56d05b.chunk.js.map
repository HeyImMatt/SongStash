{"version":3,"sources":["app/Actions/user.js","app/Actions/types.js","app/Components/AppNav/AppNav.js","app/Actions/song.js","app/Components/CreateSongForm/CreateSongForm.js","app/Containers/CreateSong/CreateSongContainer.js","app/Components/Song/Song.js","app/Containers/SongDetail/SongDetailContainer.js","app/Components/SongList/SongList.js","app/Actions/search.js","app/Containers/SearchSong/SearchSongContainer.js","routes.js","app/Components/App/App.js","app/Reducers/search.js","app/Reducers/song.js","app/Reducers/user.js","app/Reducers/root.js","app/store.js","serviceWorker.js","index.js"],"names":["API_URL","process","SONG_STASH_API_URL","getUserDataFromApi","id","dispatch","a","axios","get","resp","type","data","AppNav","useDispatch","clearSong","Navbar","color","dark","NavbarBrand","className","href","Nav","navbar","pills","justified","NavItem","NavLink","to","onClick","postNewSong","song","userId","post","user_id","setCurrentSong","getLyrics","mmId","lyrics","replace","CreateSongForm","formData","formHandler","lyricsUrl","submitHandler","title","artist","Col","md","Form","onSubmit","FormGroup","Label","for","Input","name","value","onChange","required","FormText","target","rel","Button","CreateSongContainer","history","useHistory","user","useSelector","store","useState","setFormData","isSubmitting","setIsSubmitting","useEffect","push","submitSong","e","fData","preventDefault","Song","dangerouslySetInnerHTML","__html","SongDetailContainer","SongList","songs","rowEvents","row","rowIndex","bootstrap4","keyField","columns","dataField","text","sort","defaultSorted","order","searchSongsApi","query","encodeURI","SearchSongContainer","search","isSearching","setIsSearching","searchSongs","results","Routes","path","exact","App","isLoading","setIsLoading","fetchUserData","Row","INITIAL_STATE","parseInt","window","token","stashes","htmlify","map","combineReducers","state","action","lyricsLocation","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","ReactDOM","render","StrictMode","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.5e56d05b.chunk.js","sourcesContent":["import axios from 'axios';\nimport { FETCH_USER_DATA } from './types';\n\nconst API_URL = process.env.SONG_STASH_API_URL || 'http://127.0.0.1:5000/api';\n\nexport function getUserDataFromApi(id) {\n  return async function(dispatch) {\n    const resp = await axios.get(`${API_URL}/users/${id}`);\n    return dispatch(getUserData(resp.data));\n  }\n}\n\nfunction getUserData(data) {\n  return {\n    type: FETCH_USER_DATA,\n    data,\n  };\n};","// User types\nexport const FETCH_USER_DATA = 'FETCH_USER_DATA';\n\n// Song types\nexport const SET_CURRENT_SONG = 'SET_CURRENT_SONG';\nexport const CLEAR_CURRENT_SONG = 'CLEAR_CURRENT_SONG';\n\n// Search types\nexport const SET_SEARCH_RESULTS = 'SET_SEARCH_RESULTS';\nexport const CLEAR_SEARCH_RESULTS = 'CLEAR_SEARCH_RESULTS';","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Nav, Navbar, NavbarBrand, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { CLEAR_CURRENT_SONG } from '../../Actions/types';\nimport './AppNav.css';\n\nexport default function AppNav() {\n  const dispatch = useDispatch();\n  const clearSong = () => {\n    dispatch({\n      type: CLEAR_CURRENT_SONG,\n    });\n  }\n\n  return (\n    <>\n      <Navbar id=\"main-nav-bar\" color=\"dark\" dark >\n        <NavbarBrand className=\"mb-auto mx-auto w-100 text-center\" href=\"/\">SongStash</NavbarBrand>\n        <Nav navbar pills justified className=\"h-75 w-100\">\n          <NavItem className=\"mx-auto my-auto\">\n            <NavLink>My Stashes</NavLink>\n          </NavItem>\n          <NavItem className=\"mx-auto my-auto\">\n            <Link to=\"/mysongs\"><NavLink>My Songs</NavLink></Link>\n          </NavItem>\n          <NavItem className=\"mx-auto my-auto\">\n          <Link to=\"/searchsongs\"><NavLink onClick={clearSong}>Song Search</NavLink></Link>\n          </NavItem>\n          <NavItem className=\"mx-auto my-auto\">\n            <Link to=\"/createsong\"><NavLink onClick={clearSong}>Create Song</NavLink></Link>\n          </NavItem>\n        </Nav>\n        <NavLink className=\"d-block mx-auto mt-auto\" href=\"/logout\">Log Out</NavLink>\n      </Navbar>\n    </>\n  )\n}","import axios from 'axios';\nimport { SET_CURRENT_SONG } from './types';\n\nconst API_URL = process.env.SONG_STASH_API_URL || 'http://127.0.0.1:5000/api';\n\nexport function postNewSong(song, userId) {\n  return async function(dispatch) {\n    const resp = await axios.post(`${API_URL}/songs`, {...song, user_id: userId});\n    return dispatch(setCurrentSong(resp.data));\n  }\n}\n\nexport function getLyrics(song) {\n  return async function(dispatch) {\n    const resp = await axios.get(`${API_URL}/lyrics/${song.mmId}`);\n    return dispatch(setCurrentSong({...song, lyrics: resp.data.replace(/\\n/g, '<br />')}));\n  }\n}\n\nexport function setCurrentSong(data) {\n  return {\n    type: SET_CURRENT_SONG,\n    data,\n  }\n}","import React from 'react';\nimport { Button, Col, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nexport default function CreateSongForm({ formData, formHandler, lyricsUrl, submitHandler }) {\n  const { title, artist, lyrics } = formData;\n  return (\n    <Col md={8} className=\"text-center mx-auto\">\n      <Form onSubmit={submitHandler}>\n        <FormGroup>\n          <Label for=\"title\">Title</Label>\n          <Input type=\"text\" id=\"title\" name=\"title\" value={title} onChange={formHandler} required />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"artist\">Artist</Label>\n          <Input type=\"text\" id=\"artist\" name=\"artist\" value={artist} onChange={formHandler} required />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"lyrics\">Lyrics</Label>\n          <Input type=\"textarea\" id=\"lyrics\" name=\"lyrics\" value={lyrics} onChange={formHandler} required />\n          {lyricsUrl && <FormText>No guarantees, but you might be able to find the rest of the lyrics at: \n          <a href={lyricsUrl} target=\"_blank\" rel=\"noopener noreferrer\">{lyricsUrl}</a></FormText>}\n        </FormGroup>\n        <Button>Create Song</Button>\n      </Form>\n    </Col>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Col } from 'reactstrap';\nimport { postNewSong } from '../../Actions/song';\nimport CreateSongForm from '../../Components/CreateSongForm/CreateSongForm';\n\nexport default function CreateSongContainer() {\n  const DEFAULT_FORM_STATE = {\n    id: null,\n    title: '',\n    artist: '',\n    lyrics: ''\n  };\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const user = useSelector( store => store.user );\n  const song = useSelector( store => store.song );\n  const [formData, setFormData] = useState(song || DEFAULT_FORM_STATE);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(function() {\n    async function submitSong() {\n      if (!formData.id) {\n        await dispatch(postNewSong(formData, user.id));\n        setIsSubmitting(false);\n        history.push('/song');\n      }\n    };\n    if (isSubmitting) {\n      submitSong();\n    };\n  }, [dispatch, isSubmitting, formData, user, history]);\n\n  const formHandler = (e) => {\n    const {name, value} = e.target;\n    setFormData( fData => ({\n      ...fData,\n      [name]: value\n    }));\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n  }\n\n  return (\n    <>\n      <Col md={8} className=\"text-center mx-auto mb-3\">\n        <h2>Create Song</h2>\n      </Col>\n      <CreateSongForm formData={formData} formHandler={formHandler} submitHandler={submitHandler} />\n    </>\n  )\n}","import React from 'react';\n\nexport default function Song({ song }) {\n  return (\n    <>\n      <h3>{song.title}</h3>\n      <h5>{song.artist}</h5>\n      <span id=\"lyrics\" className=\"mt-3\" dangerouslySetInnerHTML = {{__html: song.lyrics}}></span>\n    </>\n  )\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Col } from 'reactstrap';\nimport Song from '../../Components/Song/Song';\n\nexport default function SongDetailContainer() {\n  const song = useSelector( store => store.song );\n\n  return (\n    <>\n      <Col className=\"text-center mx-auto mt-3\">\n        <Song song={song} />\n      </Col>\n    </>\n  )\n}","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setCurrentSong } from '../../Actions/song';\nimport { useHistory } from 'react-router-dom';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nexport default function SongList({ songs, getLyrics }) {\n  // Note: pass in songs from My Songs or Search containers and then remove user line below\n  const user = useSelector((store) => store.user);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const columns = [\n    {\n      dataField: 'artist',\n      text: 'Artist',\n      sort: true,\n    },\n    {\n      dataField: 'title',\n      text: 'Song Title',\n      sort: true,\n    },\n  ];\n  const defaultSorted = [{\n    dataField: 'artist',\n    order: 'asc',\n  }]\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      if (songs) {\n        dispatch(getLyrics(row));\n      } else dispatch(setCurrentSong(row));\n      history.push('/song');\n    }\n  };\n\n  return <BootstrapTable \n  bootstrap4 \n  keyField={songs ? 'mmId' : 'id'} \n  data={songs || user.songs} \n  columns={columns} \n  defaultSorted={defaultSorted} \n  rowEvents={rowEvents}\n  />\n}\n","import axios from 'axios';\nimport { SET_SEARCH_RESULTS } from './types';\n\nconst API_URL = process.env.SONG_STASH_API_URL || 'http://127.0.0.1:5000/api';\n\nexport function searchSongsApi(query) {\n  return async function(dispatch) {\n    const resp = await axios.get(`${API_URL}/search/${encodeURI(query)}`);\n    return dispatch(setSearchResults(resp.data));\n  }\n}\n\nexport function setSearchResults(data) {\n  return {\n    type: SET_SEARCH_RESULTS,\n    data,\n  };\n};","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Col, Form, FormGroup, Input } from 'reactstrap';\nimport SongList from '../../Components/SongList/SongList';\nimport { searchSongsApi } from '../../Actions/search';\nimport { getLyrics } from '../../Actions/song';\n\nexport default function SearchSongContainer() {\n  const DEFAULT_FORM_STATE = {\n    query: '',\n  };\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const search = useSelector( store => store.search );\n  const [formData, setFormData] = useState(DEFAULT_FORM_STATE);\n  const [isSearching, setIsSearching] = useState(false);\n\n  useEffect(function() {\n    async function searchSongs() {\n      if (!formData.id) {\n        await dispatch(searchSongsApi(formData.query));\n        setIsSearching(false);\n      }\n    };\n    if (isSearching) {\n      searchSongs();\n    };\n  }, [dispatch, isSearching, formData, history]);\n\n  const formHandler = (e) => {\n    const {name, value} = e.target;\n    setFormData( fData => ({\n      ...fData,\n      [name]: value\n    }));\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setIsSearching(true);\n  }\n\n  return (\n    <Col md={8} className=\"text-center mx-auto\">\n      <div className=\"my-3\">\n        <h2>Search Songs</h2>\n        <h5>Enter artist, title, or song lyrics to find new songs</h5>\n      </div>\n      <Form onSubmit={submitHandler}>\n        <FormGroup>\n          <Input type=\"text\" id=\"query\" name=\"query\" value={formData.query} onChange={formHandler} required />\n        </FormGroup>\n        <Button className=\"mb-3\">Search</Button>\n      </Form>\n      {search && <SongList songs={search.results} getLyrics={getLyrics} />}\n    </Col>\n  )\n}","import React from 'react';\nimport { Switch, Redirect, Route } from 'react-router-dom';\nimport CreateSongContainer from './app/Containers/CreateSong/CreateSongContainer';\nimport SongDetailContainer from './app/Containers/SongDetail/SongDetailContainer';\nimport SearchSongContainer from './app/Containers/SearchSong/SearchSongContainer';\nimport SongList from './app/Components/SongList/SongList';\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/mysongs\" exact>\n        <SongList />\n      </Route>\n      <Route path=\"/createsong\" exact>\n        <CreateSongContainer />\n      </Route>\n      <Route path=\"/searchsongs\" exact>\n        <SearchSongContainer />\n      </Route>\n      <Route path=\"/song\" exact>\n        <SongDetailContainer />\n      </Route>\n      <Redirect to=\"/\" />\n    </Switch>\n  )\n}","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUserDataFromApi } from '../../Actions/user';\r\nimport { Col, Row } from 'reactstrap';\r\nimport AppNav from '../../Components/AppNav/AppNav';\r\nimport Routes from '../../../routes';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const user = useSelector( store => store.user );\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(function() {\r\n    async function fetchUserData() {\r\n      await dispatch(getUserDataFromApi(user.id));\r\n      setIsLoading(false);\r\n    };\r\n    if (isLoading) {\r\n      fetchUserData();\r\n    };\r\n  }, [dispatch, isLoading, user]);\r\n\r\n  if (isLoading) return <h3>Loading</h3>\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col id=\"nav-col\" md={2}>\r\n          <AppNav />\r\n        </Col>\r\n        <Col md={10}>\r\n          <Routes />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { \n  SET_SEARCH_RESULTS,\n  CLEAR_SEARCH_RESULTS\n} from '../Actions/types';\n\nconst INITIAL_STATE = {}\n\nexport default function rootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    \n    case SET_SEARCH_RESULTS:\n      const results = action.data;\n      return {\n        ...state,\n        results\n      }\n    \n    case CLEAR_SEARCH_RESULTS:\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n}","import { \n  SET_CURRENT_SONG,\n  CLEAR_CURRENT_SONG, \n} from '../Actions/types';\n\nconst INITIAL_STATE = {}\n\nexport default function rootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    \n    case SET_CURRENT_SONG:\n      const song = action.data;\n      return {\n        ...state,\n        id: song.id ? song.id : null,\n        title: song.title,\n        artist: song.artist,\n        lyrics: song.lyrics,\n        lyricsLocation: song.lyricsLocation ? song.lyricsLocation : null,\n      }\n    \n    case CLEAR_CURRENT_SONG:\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n}","import { \n  FETCH_USER_DATA,\n} from '../Actions/types';\n\nconst INITIAL_STATE = {\n  id: parseInt(window.token),\n  songs: [],\n  stashes: [], \n}\n\nfunction htmlify(songs) {\n  return songs.map( song => ({\n    ...song,\n    lyrics: song.lyrics.replace(/\\n/g, '<br />')\n  }));\n}\n\nexport default function rootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case FETCH_USER_DATA:\n      const songs = htmlify(action.data.songs);\n      return {\n        ...state,\n        songs: [...songs],\n        stashes: [...action.data.stashes]\n      };\n    default:\n      return state;\n  }\n}","import search from './search';\nimport song from './song';\nimport user from './user';\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n  search,\n  song,\n  user,\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport combineReducers from \"./Reducers/root\";\r\n\r\nexport const store = createStore(\r\n  combineReducers,\r\n  compose(\r\n    applyMiddleware(thunk),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__\r\n    && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/Components/App/App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <Route path=\"/\" component={App} />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}